package crypto

import (
	"crypto/cipher"
	"fmt"
	"io"
)

type CTR struct {
	b       cipher.Block
	iv      []byte
	ctr     []byte
	out     []byte
	outUsed int
}

const streamBufferSize = 512

func NewCTR(block cipher.Block, iv []byte) *CTR {
	if len(iv) != block.BlockSize() {
		panic("cipher.NewCTR: IV length must equal block size")
	}
	bufSize := streamBufferSize
	if bufSize < block.BlockSize() {
		bufSize = block.BlockSize()
	}
	return &CTR{
		b:       block,
		iv:      Duplicate(iv),
		ctr:     Duplicate(iv),
		out:     make([]byte, 0, bufSize),
		outUsed: 0,
	}
}

func (x *CTR) refill() {
	// Get the remaining amount of encrypted bytes left
	remain := len(x.out) - x.outUsed
	// Copy everything from out[outused:] to x[:outused]
	copy(x.out, x.out[x.outUsed:])
	// cap out to out
	x.out = x.out[:cap(x.out)]
	// block size reference
	bs := x.b.BlockSize()
	// Loop while the amount of bytes left is under the size of out take the block size
	for remain <= len(x.out)-bs {
		// encrypt out from the remaining with the counter
		x.b.Encrypt(x.out[remain:], x.ctr)
		// add block size to the remaining
		remain += bs

		// Increment counter
		for i := len(x.ctr) - 1; i >= 0; i-- {
			x.ctr[i]++
			if x.ctr[i] != 0 {
				break
			}
		}
	}
	x.out = x.out[:remain]
	x.outUsed = 0
}

func (x *CTR) XORKeyStream(dst, src []byte) {
	// Iterate through the src until there's nothing left to encrypt
	for len(src) > 0 {
		// If we've used all of the encrypted bytes generated by the key and the
		// counter then refill it
		if x.outUsed >= len(x.out)-x.b.BlockSize() {
			x.refill()
		}
		// XOR the stream and the encrypted bytes from the amount already used up to
		// its cap
		n := XORBytes(dst, src, x.out[x.outUsed:])
		dst = dst[n:]
		src = src[n:]
		x.outUsed += n
		fmt.Println(x.outUsed%x.b.BlockSize(), x.outUsed)
	}
}

func (x *CTR) Set(r io.ReadSeeker, n int) {
	copy(x.ctr, x.iv)
	for ; n > 0; n-- {
		for i := len(x.ctr) - 1; i >= 0; i-- {
			x.ctr[i]++
			if x.ctr[i] != 0 {
				break
			}
		}
	}
}
